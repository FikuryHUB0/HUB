local art = [[
    *********************************************************************************************************************
    _____                _                  _____                 _                                       _   
    |  __ \              | |                |  __ \               | |                                     | |  
    | |__) |_ _ _ __   __| | __ _   ______  | |  | | _____   _____| | ___  _ __   ___ _ __ ___   ___ _ __ | |_ 
    |  ___/ _` | '_ \ / _` |/ _` | |______| | |  | |/ _ \ \ / / _ \ |/ _ \| '_ \ / _ \ '_ ` _ \ / _ \ '_ \| __|
    | |  | (_| | | | | (_| | (_| |          | |__| |  __/\ V /  __/ | (_) | |_) |  __/ | | | | |  __/ | | | |_ 
    |_|   \__,_|_| |_|\__,_|\__,_|          |_____/ \___| \_/ \___|_|\___/| .__/ \___|_| |_| |_|\___|_| |_|\__|
                                                                          | |                                  
                                                                          |_|                                  
*********************************************************************************************************************
]]
print(art)
local server_configuration = "https://pandadevelopment.net";
warn('[+] - Initialized Key System')
warn('[+] - Detecting Devices...')
if not game:GetService("UserInputService").TouchEnabled and not game:GetService("UserInputService").KeyboardEnabled == false then
    warn('[+] - Detected ( PC Version, Executing Panda Lib )')
    print('Panda Authentication System Loaded (PC Library)')
    print('____________________________________________')



    -- Panda Authentication System ( Core )
    local RblxTokenID = game:GetService("RbxAnalyticsService"):GetClientId();

    local GenerateLink, Validate = (function()
    local Level1;

    Level1 = {
        [1] = game:GetService("HttpService"),
        [2] = game:GetService("HttpService").GenerateGUID,
        [3] = string.gsub,
        [4] = table.insert,
        [5] = set_thread_identity or setthreadidentity or syn.set_thread_identity,
        -- [6] = request or syn.request,
        [6] = function(settings)
            local ex_request = syn and syn.request or request;
            if ex_request then
              return ex_request(settings);
            end;
            if settings.Method == nil or settings.Method == 'GET' then
              local Body = game:HttpGet(settings.Url);
              return {
                Success = true,
                StatusCode = 200,
                Body = Body
              }
            else
              warn('unsupported request settings');
              return {
                Success = false
              }
            end
          end,
        [7] = string.byte,
        [8] = function(length)
            local result = "";
        
            for i=0,(length/32)+1 do
                local guid = Level1[2](Level1[1]);
                guid = Level1[3](guid, "{", "");
                guid = Level1[3](guid, "}", "");
                guid = Level1[3](guid, "-", "");
                
                result = result .. guid;
            end
        
            return result;
        end,
        [9] = function(str, sep)
            local result = {}
            local regex = Level1[15]("([^%s]+)", sep);
            for each in Level1[14](str, regex) do
               Level1[4](result, each)
            end
            return result
        end,
        [10] = table.clear,
        [11] = getfenv,
        [12] = next,
        [13] = tonumber,
        [14] = string.gmatch,
        [15] = string.format,
        [16] = islclosure,
        [17] = newcclosure(function() return true; end),
        [18] = clonefunction,
        [19] = newcclosure(function() return false; end),
        [20] = hookfunction,
        [21] = setmetatable,
        [22] = newcclosure,
        [23] = function(URL, Exploit)
            local Response = Level1[6]({
                Url = URL .. "/fingerprint",
                Method = "GET",
                Headers = {
                    ["User-Agent"] = "Lua-Auth-Client/1.0"
                }
            });
    
            if (Response.Success and Response.Body ~= "") then
                return true, URL .. "/getkey?service=" .. Exploit .. "&hwid=" .. RblxTokenID;
            else
                return false, nil
            end
        end,
        [24] = function(URL, Exploit, Key)
            local fingerprint = Level1[6]({
                Url = URL .. "/fingerprint",
                Method = "GET",
                Headers = {
                    ["User-Agent"] = "Lua-Auth-Client/1.0"
                }
            });
    
            if (fingerprint.Success and fingerprint.Body ~= "") then
                local Blob = Level1[8](#fingerprint.Body);
                local Response = Level1[6]({
                    Url = URL .. "/validate?service=" .. Exploit .. "&key=" .. Key .. "&hwid=" .. RblxTokenID .. "&blob=" .. Blob,
                    Method = "GET",
                    Headers = {
                        ["User-Agent"] = "Lua-Auth-Client/1.0"
                    }
                });
        
                if (Response.Success and Response.Body ~= "") then
                    local bytes = Level1[9](Response.Body, "#");
    
                    for index, _ in Level1[12], bytes do
                        if (index%2==0) then
                            bytes[index] = nil
                        end
                    end
    
                    local bytes_ = {};
    
                    for _, value in Level1[12], bytes do
                        if (value ~= nil) then
                            Level1[4](bytes_, Level1[13](value));
                        end
                    end
    
                    bytes = bytes_;
    
                    for index, value in Level1[12], bytes do
                        if ((Level1[7](Key:sub(index, index)) * Level1[7](Blob:sub(index, index))) - (Level1[7](Blob:sub(index, index)) + Level1[7](Key:sub(index, index))) ~= value) then
                            return false
                        end
                    end
                    
                    return true
                else
                    return false
                end
            else
                return false
            end
        end
    }
    
    local Original = Level1[20];
    local Old = Level1[18](Level1[20]);
    
    Level1[21](Level1, {
        __newindex = Level1[22](function() 
            while (true) do 
                if (Level1[17]() == Level1[19]()) then
                    break;
                end
            end
        end)
    });
    
    for _, value in Level1[12], Level1 do
        if (typeof(value) == "function" and not Level1[16](value)) then
            Level1[_] = Level1[18](value);
        end
    end
    
    Level1[20](Original, function(...)
        local args = {...};
    
        for _, value in Level1[12], Level1 do
            if (value == args[1]) then
                while (true) do
                    if (Level1[17]() == Level1[19]()) then
                        break;
                    end
                end
            end
        end
    
        return Old(...);
    end)
       
    return Level1[23], Level1[24];
end)();



    function ValidateKey(Exploit, Key)
        return Validate(server_configuration, Exploit, Key)
    end

    function GetLink(service_val)
        print("[PC] - Generating Key...") 
        local s, e = GenerateLink(server_configuration, service_val);
        if s then
        print("[PC] - Key Successfully Generated") 
        game.StarterGui:SetCore("SendNotification", {Text = "Key Successfully Generated"; Duration = 3;})
        return e
        end
    end
    return PandaAuthenticationLib
    else
        print("Detected Android / Ios Devices")
        print('____________________________________________')
    warn('Panda Authentication System Loaded (Mobile Library)')
    print('____________________________________________')


    -- Panda Authentication System ( Core )
    local key_Players = game:GetService("Players");
    local key_tostring = tostring;
    local key_request = request;

    function ValidateMobile(url, exploit, key)
        local rblxTokenID = game:GetService("RbxAnalyticsService"):GetClientId() -- Change this whatever you want, this is basically Roblox HWID
        local blob = string.rep("_", #key)

        local response = key_request({
            Url = url .. "/validate?service=" .. exploit .. "&key=" .. key .. "&hwid=" .. tostring(key_Players.LocalPlayer.UserId) .. "_MOBILE&blob=" .. blob,
            Method = "GET",
            Headers = {
                ["User-Agent"] = "Mobile-Auth-Client/1.0"
            }
        })

        if response.Success then
            if response.Body ~= "" then
                print("[+] Successfully authenticated")
                return true
            else
                warn("[!] Empty response body")
            end
        else    
            warn("[!] HTTP request failed: " .. response.StatusCode)
        end

        print("[+] Failed to authenticate")
        return false
    end


    function ValidateKey(service_val, Key)
        return ValidateMobile(server_configuration, service_val, Key)
    end

    function GetLink(service_val)
        print('Get Key Complete!')
        local link = server_configuration .. "/getkey?service=" .. service_val .. "&hwid=" .. key_tostring(key_Players.LocalPlayer.UserId) .. "_MOBILE";
        return link;
    end
end
